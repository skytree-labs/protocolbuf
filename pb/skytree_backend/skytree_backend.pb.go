// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: skytree_backend.proto

package skytree_backend

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Data struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tx *Tx `protobuf:"bytes,1,opt,name=tx,proto3" json:"tx,omitempty"`
}

func (x *Data) Reset() {
	*x = Data{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Data) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Data) ProtoMessage() {}

func (x *Data) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Data.ProtoReflect.Descriptor instead.
func (*Data) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{0}
}

func (x *Data) GetTx() *Tx {
	if x != nil {
		return x.Tx
	}
	return nil
}

type Tx struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrossID            string `protobuf:"bytes,1,opt,name=crossID,proto3" json:"crossID,omitempty"`
	BridgeID           string `protobuf:"bytes,2,opt,name=bridgeID,proto3" json:"bridgeID,omitempty"`
	BoolMonitoredTx    string `protobuf:"bytes,3,opt,name=boolMonitoredTx,proto3" json:"boolMonitoredTx,omitempty"`
	BoolVerifiedHash   string `protobuf:"bytes,4,opt,name=boolVerifiedHash,proto3" json:"boolVerifiedHash,omitempty"`
	SourceChainID      string `protobuf:"bytes,5,opt,name=sourceChainID,proto3" json:"sourceChainID,omitempty"`
	SourceTx           string `protobuf:"bytes,6,opt,name=sourceTx,proto3" json:"sourceTx,omitempty"`
	DestinationChainID string `protobuf:"bytes,7,opt,name=destinationChainID,proto3" json:"destinationChainID,omitempty"`
	DestinationTx      string `protobuf:"bytes,8,opt,name=destinationTx,proto3" json:"destinationTx,omitempty"`
	Status             string `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	TxTimeOnChain      string `protobuf:"bytes,10,opt,name=txTimeOnChain,proto3" json:"txTimeOnChain,omitempty"`
	MessageType        string `protobuf:"bytes,11,opt,name=messageType,proto3" json:"messageType,omitempty"`
	IsOfficial         bool   `protobuf:"varint,12,opt,name=isOfficial,proto3" json:"isOfficial,omitempty"`
}

func (x *Tx) Reset() {
	*x = Tx{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Tx) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Tx) ProtoMessage() {}

func (x *Tx) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Tx.ProtoReflect.Descriptor instead.
func (*Tx) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{1}
}

func (x *Tx) GetCrossID() string {
	if x != nil {
		return x.CrossID
	}
	return ""
}

func (x *Tx) GetBridgeID() string {
	if x != nil {
		return x.BridgeID
	}
	return ""
}

func (x *Tx) GetBoolMonitoredTx() string {
	if x != nil {
		return x.BoolMonitoredTx
	}
	return ""
}

func (x *Tx) GetBoolVerifiedHash() string {
	if x != nil {
		return x.BoolVerifiedHash
	}
	return ""
}

func (x *Tx) GetSourceChainID() string {
	if x != nil {
		return x.SourceChainID
	}
	return ""
}

func (x *Tx) GetSourceTx() string {
	if x != nil {
		return x.SourceTx
	}
	return ""
}

func (x *Tx) GetDestinationChainID() string {
	if x != nil {
		return x.DestinationChainID
	}
	return ""
}

func (x *Tx) GetDestinationTx() string {
	if x != nil {
		return x.DestinationTx
	}
	return ""
}

func (x *Tx) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *Tx) GetTxTimeOnChain() string {
	if x != nil {
		return x.TxTimeOnChain
	}
	return ""
}

func (x *Tx) GetMessageType() string {
	if x != nil {
		return x.MessageType
	}
	return ""
}

func (x *Tx) GetIsOfficial() bool {
	if x != nil {
		return x.IsOfficial
	}
	return false
}

type GetCrossChainTxStatusRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhichBridge string `protobuf:"bytes,1,opt,name=which_bridge,json=whichBridge,proto3" json:"which_bridge,omitempty"`
	SrcTxHash   string `protobuf:"bytes,2,opt,name=src_tx_hash,json=srcTxHash,proto3" json:"src_tx_hash,omitempty"`
}

func (x *GetCrossChainTxStatusRequest) Reset() {
	*x = GetCrossChainTxStatusRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossChainTxStatusRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossChainTxStatusRequest) ProtoMessage() {}

func (x *GetCrossChainTxStatusRequest) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossChainTxStatusRequest.ProtoReflect.Descriptor instead.
func (*GetCrossChainTxStatusRequest) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{2}
}

func (x *GetCrossChainTxStatusRequest) GetWhichBridge() string {
	if x != nil {
		return x.WhichBridge
	}
	return ""
}

func (x *GetCrossChainTxStatusRequest) GetSrcTxHash() string {
	if x != nil {
		return x.SrcTxHash
	}
	return ""
}

type GetCrossChainTxStatusResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *Data  `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Fail bool   `protobuf:"varint,4,opt,name=fail,proto3" json:"fail,omitempty"`
}

func (x *GetCrossChainTxStatusResponse) Reset() {
	*x = GetCrossChainTxStatusResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossChainTxStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossChainTxStatusResponse) ProtoMessage() {}

func (x *GetCrossChainTxStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossChainTxStatusResponse.ProtoReflect.Descriptor instead.
func (*GetCrossChainTxStatusResponse) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{3}
}

func (x *GetCrossChainTxStatusResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetCrossChainTxStatusResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetCrossChainTxStatusResponse) GetData() *Data {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCrossChainTxStatusResponse) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

type DepositPointRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CrossChainTxId int64 `protobuf:"varint,1,opt,name=cross_chain_tx_id,json=crossChainTxId,proto3" json:"cross_chain_tx_id,omitempty"`
}

func (x *DepositPointRequest) Reset() {
	*x = DepositPointRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositPointRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositPointRequest) ProtoMessage() {}

func (x *DepositPointRequest) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositPointRequest.ProtoReflect.Descriptor instead.
func (*DepositPointRequest) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{4}
}

func (x *DepositPointRequest) GetCrossChainTxId() int64 {
	if x != nil {
		return x.CrossChainTxId
	}
	return 0
}

type DepositPointResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *DepositPointResponse) Reset() {
	*x = DepositPointResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DepositPointResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DepositPointResponse) ProtoMessage() {}

func (x *DepositPointResponse) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DepositPointResponse.ProtoReflect.Descriptor instead.
func (*DepositPointResponse) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{5}
}

type BoolTxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxiliaryHash         string `protobuf:"bytes,1,opt,name=AuxiliaryHash,proto3" json:"AuxiliaryHash,omitempty"`
	BridgeID              string `protobuf:"bytes,2,opt,name=BridgeID,proto3" json:"BridgeID,omitempty"`
	BridgeName            string `protobuf:"bytes,3,opt,name=BridgeName,proto3" json:"BridgeName,omitempty"`
	CommitteeID           string `protobuf:"bytes,4,opt,name=CommitteeID,proto3" json:"CommitteeID,omitempty"`
	CommitteeMemberNumber int64  `protobuf:"varint,5,opt,name=CommitteeMemberNumber,proto3" json:"CommitteeMemberNumber,omitempty"`
	CommitteeName         string `protobuf:"bytes,6,opt,name=CommitteeName,proto3" json:"CommitteeName,omitempty"`
	CommitteeThreshold    int64  `protobuf:"varint,7,opt,name=CommitteeThreshold,proto3" json:"CommitteeThreshold,omitempty"`
	Height                string `protobuf:"bytes,8,opt,name=Height,proto3" json:"Height,omitempty"`
	Status                string `protobuf:"bytes,9,opt,name=Status,proto3" json:"Status,omitempty"`
	TxHash                string `protobuf:"bytes,10,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	TxTime                string `protobuf:"bytes,11,opt,name=TxTime,proto3" json:"TxTime,omitempty"`
}

func (x *BoolTxInfo) Reset() {
	*x = BoolTxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolTxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolTxInfo) ProtoMessage() {}

func (x *BoolTxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolTxInfo.ProtoReflect.Descriptor instead.
func (*BoolTxInfo) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{6}
}

func (x *BoolTxInfo) GetAuxiliaryHash() string {
	if x != nil {
		return x.AuxiliaryHash
	}
	return ""
}

func (x *BoolTxInfo) GetBridgeID() string {
	if x != nil {
		return x.BridgeID
	}
	return ""
}

func (x *BoolTxInfo) GetBridgeName() string {
	if x != nil {
		return x.BridgeName
	}
	return ""
}

func (x *BoolTxInfo) GetCommitteeID() string {
	if x != nil {
		return x.CommitteeID
	}
	return ""
}

func (x *BoolTxInfo) GetCommitteeMemberNumber() int64 {
	if x != nil {
		return x.CommitteeMemberNumber
	}
	return 0
}

func (x *BoolTxInfo) GetCommitteeName() string {
	if x != nil {
		return x.CommitteeName
	}
	return ""
}

func (x *BoolTxInfo) GetCommitteeThreshold() int64 {
	if x != nil {
		return x.CommitteeThreshold
	}
	return 0
}

func (x *BoolTxInfo) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *BoolTxInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *BoolTxInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *BoolTxInfo) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

type TxInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Amount        string `protobuf:"bytes,1,opt,name=Amount,proto3" json:"Amount,omitempty"`
	AnchorAddress string `protobuf:"bytes,2,opt,name=AnchorAddress,proto3" json:"AnchorAddress,omitempty"`
	ChainID       string `protobuf:"bytes,3,opt,name=ChainID,proto3" json:"ChainID,omitempty"`
	Height        string `protobuf:"bytes,4,opt,name=Height,proto3" json:"Height,omitempty"`
	Method        string `protobuf:"bytes,5,opt,name=Method,proto3" json:"Method,omitempty"`
	Status        string `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	Token         string `protobuf:"bytes,7,opt,name=Token,proto3" json:"Token,omitempty"`
	TxHash        string `protobuf:"bytes,8,opt,name=TxHash,proto3" json:"TxHash,omitempty"`
	TxTime        string `protobuf:"bytes,9,opt,name=TxTime,proto3" json:"TxTime,omitempty"`
}

func (x *TxInfo) Reset() {
	*x = TxInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TxInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TxInfo) ProtoMessage() {}

func (x *TxInfo) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TxInfo.ProtoReflect.Descriptor instead.
func (*TxInfo) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{7}
}

func (x *TxInfo) GetAmount() string {
	if x != nil {
		return x.Amount
	}
	return ""
}

func (x *TxInfo) GetAnchorAddress() string {
	if x != nil {
		return x.AnchorAddress
	}
	return ""
}

func (x *TxInfo) GetChainID() string {
	if x != nil {
		return x.ChainID
	}
	return ""
}

func (x *TxInfo) GetHeight() string {
	if x != nil {
		return x.Height
	}
	return ""
}

func (x *TxInfo) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *TxInfo) GetStatus() string {
	if x != nil {
		return x.Status
	}
	return ""
}

func (x *TxInfo) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *TxInfo) GetTxHash() string {
	if x != nil {
		return x.TxHash
	}
	return ""
}

func (x *TxInfo) GetTxTime() string {
	if x != nil {
		return x.TxTime
	}
	return ""
}

type OrderTxDetail struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BoolTxInfos  []*BoolTxInfo `protobuf:"bytes,1,rep,name=BoolTxInfos,proto3" json:"BoolTxInfos,omitempty"`
	DestTxInfo   *TxInfo       `protobuf:"bytes,2,opt,name=DestTxInfo,proto3" json:"DestTxInfo,omitempty"`
	SourceTxInfo *TxInfo       `protobuf:"bytes,3,opt,name=SourceTxInfo,proto3" json:"SourceTxInfo,omitempty"`
}

func (x *OrderTxDetail) Reset() {
	*x = OrderTxDetail{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderTxDetail) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderTxDetail) ProtoMessage() {}

func (x *OrderTxDetail) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderTxDetail.ProtoReflect.Descriptor instead.
func (*OrderTxDetail) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{8}
}

func (x *OrderTxDetail) GetBoolTxInfos() []*BoolTxInfo {
	if x != nil {
		return x.BoolTxInfos
	}
	return nil
}

func (x *OrderTxDetail) GetDestTxInfo() *TxInfo {
	if x != nil {
		return x.DestTxInfo
	}
	return nil
}

func (x *OrderTxDetail) GetSourceTxInfo() *TxInfo {
	if x != nil {
		return x.SourceTxInfo
	}
	return nil
}

type GetCrossChainTxDetailRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WhichBridge string `protobuf:"bytes,1,opt,name=which_bridge,json=whichBridge,proto3" json:"which_bridge,omitempty"`
	CrossId     string `protobuf:"bytes,2,opt,name=cross_id,json=crossId,proto3" json:"cross_id,omitempty"`
}

func (x *GetCrossChainTxDetailRequest) Reset() {
	*x = GetCrossChainTxDetailRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossChainTxDetailRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossChainTxDetailRequest) ProtoMessage() {}

func (x *GetCrossChainTxDetailRequest) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossChainTxDetailRequest.ProtoReflect.Descriptor instead.
func (*GetCrossChainTxDetailRequest) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{9}
}

func (x *GetCrossChainTxDetailRequest) GetWhichBridge() string {
	if x != nil {
		return x.WhichBridge
	}
	return ""
}

func (x *GetCrossChainTxDetailRequest) GetCrossId() string {
	if x != nil {
		return x.CrossId
	}
	return ""
}

type GetCrossChainTxDetailResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code string         `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg  string         `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	Data *OrderTxDetail `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	Fail bool           `protobuf:"varint,4,opt,name=fail,proto3" json:"fail,omitempty"`
}

func (x *GetCrossChainTxDetailResponse) Reset() {
	*x = GetCrossChainTxDetailResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_skytree_backend_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetCrossChainTxDetailResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetCrossChainTxDetailResponse) ProtoMessage() {}

func (x *GetCrossChainTxDetailResponse) ProtoReflect() protoreflect.Message {
	mi := &file_skytree_backend_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetCrossChainTxDetailResponse.ProtoReflect.Descriptor instead.
func (*GetCrossChainTxDetailResponse) Descriptor() ([]byte, []int) {
	return file_skytree_backend_proto_rawDescGZIP(), []int{10}
}

func (x *GetCrossChainTxDetailResponse) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *GetCrossChainTxDetailResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *GetCrossChainTxDetailResponse) GetData() *OrderTxDetail {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *GetCrossChainTxDetailResponse) GetFail() bool {
	if x != nil {
		return x.Fail
	}
	return false
}

var File_skytree_backend_proto protoreflect.FileDescriptor

var file_skytree_backend_proto_rawDesc = []byte{
	0x0a, 0x15, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e,
	0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x13, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65,
	0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x22, 0x2f, 0x0a, 0x04,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x27, 0x0a, 0x02, 0x74, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65,
	0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54, 0x78, 0x52, 0x02, 0x74, 0x78, 0x22, 0xa8, 0x03,
	0x0a, 0x02, 0x54, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x49, 0x44, 0x12, 0x1a,
	0x0a, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x6f,
	0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72, 0x65, 0x64, 0x54, 0x78, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x6f, 0x6f, 0x6c, 0x4d, 0x6f, 0x6e, 0x69, 0x74, 0x6f, 0x72,
	0x65, 0x64, 0x54, 0x78, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x69, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x10,
	0x62, 0x6f, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x12, 0x24, 0x0a, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x54, 0x78, 0x12, 0x2e, 0x0a, 0x12, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12,
	0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x24, 0x0a, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x24, 0x0a, 0x0d, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x6e, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x74, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x6e, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4f, 0x66,
	0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4f, 0x66, 0x66, 0x69, 0x63, 0x69, 0x61, 0x6c, 0x22, 0x61, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x63,
	0x68, 0x5f, 0x62, 0x72, 0x69, 0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x77, 0x68, 0x69, 0x63, 0x68, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0b, 0x73,
	0x72, 0x63, 0x5f, 0x74, 0x78, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x73, 0x72, 0x63, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x22, 0x88, 0x01, 0x0a, 0x1d,
	0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x2d, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x22, 0x40, 0x0a, 0x13, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x29, 0x0a,
	0x11, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x74, 0x78, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0e, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x49, 0x64, 0x22, 0x16, 0x0a, 0x14, 0x44, 0x65, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x22, 0xfc, 0x02, 0x0a, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72, 0x79, 0x48, 0x61, 0x73, 0x68,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x75, 0x78, 0x69, 0x6c, 0x69, 0x61, 0x72,
	0x79, 0x48, 0x61, 0x73, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x49, 0x44,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x65, 0x49, 0x44, 0x12, 0x34, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65,
	0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x15, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0d, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x2e, 0x0a, 0x12, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x54, 0x68, 0x72, 0x65,
	0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x12, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x74, 0x65, 0x65, 0x54, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65, 0x22,
	0xee, 0x01, 0x0a, 0x06, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x41, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f, 0x72, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x41, 0x6e, 0x63, 0x68, 0x6f,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x69,
	0x6e, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x43, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x48, 0x65, 0x69, 0x67, 0x68, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e,
	0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x54, 0x78, 0x48, 0x61, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x54, 0x78, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x54, 0x78, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xd0, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61,
	0x69, 0x6c, 0x12, 0x41, 0x0a, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x42, 0x6f, 0x6f, 0x6c, 0x54, 0x78,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x3b, 0x0a, 0x0a, 0x44, 0x65, 0x73, 0x74, 0x54, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x79, 0x74,
	0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x54, 0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0a, 0x44, 0x65, 0x73, 0x74, 0x54, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x49, 0x6e,
	0x66, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x54,
	0x78, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0c, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x54, 0x78, 0x49,
	0x6e, 0x66, 0x6f, 0x22, 0x5c, 0x0a, 0x1c, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x77, 0x68, 0x69, 0x63, 0x68, 0x5f, 0x62, 0x72, 0x69,
	0x64, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x77, 0x68, 0x69, 0x63, 0x68,
	0x42, 0x72, 0x69, 0x64, 0x67, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x72, 0x6f, 0x73, 0x73, 0x49,
	0x64, 0x22, 0x91, 0x01, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x52, 0x04, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x04, 0x66, 0x61, 0x69, 0x6c, 0x32, 0xfc, 0x02, 0x0a, 0x0d, 0x53, 0x6b, 0x79, 0x74, 0x65, 0x65,
	0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b,
	0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73,
	0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x80, 0x01, 0x0a, 0x15, 0x47,
	0x65, 0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x12, 0x31, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x32, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x47, 0x65,
	0x74, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x54, 0x78, 0x44, 0x65, 0x74,
	0x61, 0x69, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x65, 0x0a,
	0x0c, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x28, 0x2e,
	0x73, 0x6b, 0x79, 0x74, 0x72, 0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x44, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x73, 0x6b, 0x79, 0x74, 0x72, 0x65,
	0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x44, 0x65,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x42, 0x14, 0x5a, 0x12, 0x2e, 0x2f, 0x3b, 0x73, 0x6b, 0x79, 0x74, 0x72,
	0x65, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_skytree_backend_proto_rawDescOnce sync.Once
	file_skytree_backend_proto_rawDescData = file_skytree_backend_proto_rawDesc
)

func file_skytree_backend_proto_rawDescGZIP() []byte {
	file_skytree_backend_proto_rawDescOnce.Do(func() {
		file_skytree_backend_proto_rawDescData = protoimpl.X.CompressGZIP(file_skytree_backend_proto_rawDescData)
	})
	return file_skytree_backend_proto_rawDescData
}

var file_skytree_backend_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_skytree_backend_proto_goTypes = []interface{}{
	(*Data)(nil),                          // 0: skytree_backend.api.Data
	(*Tx)(nil),                            // 1: skytree_backend.api.Tx
	(*GetCrossChainTxStatusRequest)(nil),  // 2: skytree_backend.api.GetCrossChainTxStatusRequest
	(*GetCrossChainTxStatusResponse)(nil), // 3: skytree_backend.api.GetCrossChainTxStatusResponse
	(*DepositPointRequest)(nil),           // 4: skytree_backend.api.DepositPointRequest
	(*DepositPointResponse)(nil),          // 5: skytree_backend.api.DepositPointResponse
	(*BoolTxInfo)(nil),                    // 6: skytree_backend.api.BoolTxInfo
	(*TxInfo)(nil),                        // 7: skytree_backend.api.TxInfo
	(*OrderTxDetail)(nil),                 // 8: skytree_backend.api.OrderTxDetail
	(*GetCrossChainTxDetailRequest)(nil),  // 9: skytree_backend.api.GetCrossChainTxDetailRequest
	(*GetCrossChainTxDetailResponse)(nil), // 10: skytree_backend.api.GetCrossChainTxDetailResponse
}
var file_skytree_backend_proto_depIdxs = []int32{
	1,  // 0: skytree_backend.api.Data.tx:type_name -> skytree_backend.api.Tx
	0,  // 1: skytree_backend.api.GetCrossChainTxStatusResponse.data:type_name -> skytree_backend.api.Data
	6,  // 2: skytree_backend.api.OrderTxDetail.BoolTxInfos:type_name -> skytree_backend.api.BoolTxInfo
	7,  // 3: skytree_backend.api.OrderTxDetail.DestTxInfo:type_name -> skytree_backend.api.TxInfo
	7,  // 4: skytree_backend.api.OrderTxDetail.SourceTxInfo:type_name -> skytree_backend.api.TxInfo
	8,  // 5: skytree_backend.api.GetCrossChainTxDetailResponse.data:type_name -> skytree_backend.api.OrderTxDetail
	2,  // 6: skytree_backend.api.SkyteeBackend.GetCrossChainTxStatus:input_type -> skytree_backend.api.GetCrossChainTxStatusRequest
	9,  // 7: skytree_backend.api.SkyteeBackend.GetCrossChainTxDetail:input_type -> skytree_backend.api.GetCrossChainTxDetailRequest
	4,  // 8: skytree_backend.api.SkyteeBackend.DepositPoint:input_type -> skytree_backend.api.DepositPointRequest
	3,  // 9: skytree_backend.api.SkyteeBackend.GetCrossChainTxStatus:output_type -> skytree_backend.api.GetCrossChainTxStatusResponse
	10, // 10: skytree_backend.api.SkyteeBackend.GetCrossChainTxDetail:output_type -> skytree_backend.api.GetCrossChainTxDetailResponse
	5,  // 11: skytree_backend.api.SkyteeBackend.DepositPoint:output_type -> skytree_backend.api.DepositPointResponse
	9,  // [9:12] is the sub-list for method output_type
	6,  // [6:9] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_skytree_backend_proto_init() }
func file_skytree_backend_proto_init() {
	if File_skytree_backend_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_skytree_backend_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Data); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Tx); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossChainTxStatusRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossChainTxStatusResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositPointRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DepositPointResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolTxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TxInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderTxDetail); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossChainTxDetailRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_skytree_backend_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetCrossChainTxDetailResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_skytree_backend_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_skytree_backend_proto_goTypes,
		DependencyIndexes: file_skytree_backend_proto_depIdxs,
		MessageInfos:      file_skytree_backend_proto_msgTypes,
	}.Build()
	File_skytree_backend_proto = out.File
	file_skytree_backend_proto_rawDesc = nil
	file_skytree_backend_proto_goTypes = nil
	file_skytree_backend_proto_depIdxs = nil
}
