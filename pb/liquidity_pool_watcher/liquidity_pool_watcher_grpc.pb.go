// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package liqudidity_pool_watcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LiquidityPoolWatcherClient is the client API for LiquidityPoolWatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LiquidityPoolWatcherClient interface {
	PositionUpdated(ctx context.Context, in *PositionUpdatedRequest, opts ...grpc.CallOption) (*PositionUpdatedResponse, error)
}

type liquidityPoolWatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewLiquidityPoolWatcherClient(cc grpc.ClientConnInterface) LiquidityPoolWatcherClient {
	return &liquidityPoolWatcherClient{cc}
}

func (c *liquidityPoolWatcherClient) PositionUpdated(ctx context.Context, in *PositionUpdatedRequest, opts ...grpc.CallOption) (*PositionUpdatedResponse, error) {
	out := new(PositionUpdatedResponse)
	err := c.cc.Invoke(ctx, "/liqudidity_pool_watcher.api.LiquidityPoolWatcher/PositionUpdated", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// LiquidityPoolWatcherServer is the server API for LiquidityPoolWatcher service.
// All implementations must embed UnimplementedLiquidityPoolWatcherServer
// for forward compatibility
type LiquidityPoolWatcherServer interface {
	PositionUpdated(context.Context, *PositionUpdatedRequest) (*PositionUpdatedResponse, error)
	mustEmbedUnimplementedLiquidityPoolWatcherServer()
}

// UnimplementedLiquidityPoolWatcherServer must be embedded to have forward compatible implementations.
type UnimplementedLiquidityPoolWatcherServer struct {
}

func (UnimplementedLiquidityPoolWatcherServer) PositionUpdated(context.Context, *PositionUpdatedRequest) (*PositionUpdatedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PositionUpdated not implemented")
}
func (UnimplementedLiquidityPoolWatcherServer) mustEmbedUnimplementedLiquidityPoolWatcherServer() {}

// UnsafeLiquidityPoolWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LiquidityPoolWatcherServer will
// result in compilation errors.
type UnsafeLiquidityPoolWatcherServer interface {
	mustEmbedUnimplementedLiquidityPoolWatcherServer()
}

func RegisterLiquidityPoolWatcherServer(s grpc.ServiceRegistrar, srv LiquidityPoolWatcherServer) {
	s.RegisterService(&LiquidityPoolWatcher_ServiceDesc, srv)
}

func _LiquidityPoolWatcher_PositionUpdated_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PositionUpdatedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(LiquidityPoolWatcherServer).PositionUpdated(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/liqudidity_pool_watcher.api.LiquidityPoolWatcher/PositionUpdated",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(LiquidityPoolWatcherServer).PositionUpdated(ctx, req.(*PositionUpdatedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// LiquidityPoolWatcher_ServiceDesc is the grpc.ServiceDesc for LiquidityPoolWatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var LiquidityPoolWatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "liqudidity_pool_watcher.api.LiquidityPoolWatcher",
	HandlerType: (*LiquidityPoolWatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PositionUpdated",
			Handler:    _LiquidityPoolWatcher_PositionUpdated_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "liquidity_pool_watcher.proto",
}
